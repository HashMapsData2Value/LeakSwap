{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_ready()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "leaky_refund(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "leaky_claim(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "punish_refund()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubGVha19zd2FwLmNvbnRyYWN0LkxlYWtTd2FwLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "ali_algo_addr": {
                    "type": "bytes",
                    "key": "alice_algo_addr"
                },
                "ali_ready": {
                    "type": "uint64",
                    "key": "ali_ready"
                },
                "ali_xternal_pk": {
                    "type": "bytes",
                    "key": "alice_xternal_pk"
                },
                "data_to_sign": {
                    "type": "bytes",
                    "key": "data_to_sign"
                },
                "t0": {
                    "type": "uint64",
                    "key": "t0_timestamp"
                },
                "t1": {
                    "type": "uint64",
                    "key": "t1_timestamp"
                },
                "xin_algo_addr": {
                    "type": "bytes",
                    "key": "xin_algo_addr"
                },
                "xin_xternal_pk": {
                    "type": "bytes",
                    "key": "xin_xternal_pk"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LeakSwap",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "create",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create the LeakSwap contract."
            },
            {
                "name": "set_ready",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ali sets the contract to ready once Xin has locked up funds on the xternal chain.\n(If Ali times out, the contract will enter an equivalent \"ready\" state after t0.)"
            },
            {
                "name": "leaky_refund",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ali noticed that Xin has not deposited funds on the xternal chain (fast enough) and\nwants to refund her Algo/ASA. But the refund leaks Ali's xternal secret key, in case Xin does lock up funds in the meanwhile and needs Ali's xternal secret key to reclaim."
            },
            {
                "name": "leaky_claim",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "The contract has entered \"ready\" state, either because Ali set it to ready (after noticing that\nXin locked funds up) or because t0 has passed. Xin can now claim Ali's Algo/ASA, doing so by leaking the xternal secret key. That will allow Ali to claim the xternal funds"
            },
            {
                "name": "punish_refund",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}