{
    "hints": {
        "create(address,byte[],address,byte[],uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_ready()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_contract_state()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "leaky_refund(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "leaky_claim(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "punish_refund()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubGVha19zd2FwLmNvbnRyYWN0LkxlYWtTd2FwLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 8,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "ali_algo_addr": {
                    "type": "bytes",
                    "key": "ali_algo_addr",
                    "descr": "Ali's Algo address"
                },
                "ali_ready": {
                    "type": "bytes",
                    "key": "ali_ready",
                    "descr": "Ali's flag to enter Leaky Claim"
                },
                "ali_xternal_pk": {
                    "type": "bytes",
                    "key": "ali_xternal_pk",
                    "descr": "Ali's xternal public key"
                },
                "data_to_sign": {
                    "type": "bytes",
                    "key": "data_to_sign"
                },
                "t0": {
                    "type": "bytes",
                    "key": "t0_timestamp",
                    "descr": "Timestamp to enter Leaky Claim"
                },
                "t1": {
                    "type": "bytes",
                    "key": "t1_timestamp",
                    "descr": "Timestamp to enter Punish Refund"
                },
                "xin_algo_addr": {
                    "type": "bytes",
                    "key": "xin_algo_addr",
                    "descr": "Xin's Algo address"
                },
                "xin_xternal_pk": {
                    "type": "bytes",
                    "key": "xin_xternal_pk",
                    "descr": "Xin's xternal public key"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LeakSwap",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "ali_algo_addr"
                    },
                    {
                        "type": "byte[]",
                        "name": "ali_xternal_pk"
                    },
                    {
                        "type": "address",
                        "name": "xin_algo_addr"
                    },
                    {
                        "type": "byte[]",
                        "name": "xin_xternal_pk"
                    },
                    {
                        "type": "uint64",
                        "name": "t0"
                    },
                    {
                        "type": "uint64",
                        "name": "t1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create the LeakSwap contract."
            },
            {
                "name": "set_ready",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ali sets the contract to ready once Xin has locked up funds on the xternal chain.\n(If Ali times out, the contract will enter an equivalent \"ready\" state after t0.)"
            },
            {
                "name": "get_contract_state",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "State 0: Contract has not passed t0 or been set to ready (leak refund available)\nState 1: Contract has been (explicitly) set to ready (leaky claim available) State 2: Contract has passed t0, automatically ready (leaky claim available) State 3: Contract has passed t1 (punish refund available)"
            },
            {
                "name": "leaky_refund",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ali noticed that Xin has not deposited funds on the xternal chain (fast enough) and\nwants to refund her Algo/ASA. But the refund leaks Ali's xternal secret key, in case Xin does lock up funds in the meanwhile and needs Ali's xternal secret key to reclaim."
            },
            {
                "name": "leaky_claim",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "The contract has entered \"ready\" state, either because Ali set it to ready (after noticing that\nXin locked funds up) or because t0 has passed. Xin can now claim Ali's Algo/ASA, doing so by leaking the xternal secret key. That will allow Ali to claim the xternal funds"
            },
            {
                "name": "punish_refund",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}