{
  "version": 3,
  "sources": [
    "../../leak_swap/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;AAgBQ;;AAAoB;;AAApB;;AAjBR;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;AAAA;AAmBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAnBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAmBK;;;AAAA;AAAA;AAwEA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AASA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;AAAA;AAAA;AAAA;;AAAA;AApHL;;;AAoHK;;;AAAA;AAAA;AAoBA;;AAAA;AAAA;AAAA;;AAAA;AAxIL;;;AAwIK;;;AAAA;AAAA;AAuBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AA/JL;AAAA;AAmBA;;;AAYQ;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAuB;;;AAAvB;AAEO;AAAA;AAAA;AAAA;AAAgB;;AAAhB;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAgB;AAAA;AAAA;AAAA;AAAhB;AAAP;;AAkDR;;;AAMe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACA;AAAuB;;;AAAvB;;AAER;;;AAQW;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAX;;;AACmB;;;;;;;;;;AAAP;AACyB;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AAAX;;;AACmB;;;;;;;;;;AAAP;AACyB;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AAAX;;;AACmB;;;;;;;;;;AAAP;AACG;;;;;;;;;;AAAP;AAER;;;AAQe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGkC;AAAA;AAAA;AAAA;AAA3B;;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGqC;AAAA;;AAAA;AAAA;AAArC;;AAAA;AAAA;;;AAAA;AAAA;;AAGoB;AAAA;AAAA;AAAA;AAApB;;;;AA5DR;;;AAOe;;AAAA;;;AAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAtC;AAAP;AAC6B;AAAA;;AAAA;AAAA;AAAtB;;AAAA;;AAAA;AAAP;;;;;;AAhCR;;;AAKQ;;;;;;;;;AAAA;;;AAGQ;;;AAHR;;AAiFR;;;AAQe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAI8B;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AAAA;;;AAA2C;AAAA;AAAA;AAAA;;AAAA;AAAwB;AAAxB;AAA3C;;;;;;;;AADJ;AAIkC;AAAA;AAAA;AAAA;AAA3B;;AAAA;AAAA;AAAP;AAGqC;AAAA;;AAAA;AAAA;AAArC;;AAAA;AAAA;;;AAAA;AAAA;;AAGoB;AAAA;;AAAA;AAAA;AAApB;;;;AAER;;;AAGe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGiC;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AAAP;AAGoB;AAAA;AAAA;AAAA;AAApB;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.approval_program",
      "params": {},
      "block": "smart_contracts.leak_swap.contract.LeakSwap.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x616c695f616c676f5f61646472 0x74305f74696d657374616d70 0x74315f74696d657374616d70 0x616c695f7265616479 0x78696e5f616c676f5f61646472 \"data_to_sign\" 0x616c695f787465726e616c5f706b 0x78696e5f787465726e616c5f706b"
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "119": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.__init__",
      "op": "callsub __init__"
    },
    "122": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "125": {
      "op": "return",
      "stack_out": []
    },
    "126": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "129": {
      "op": "bytec 5 // \"data_to_sign\""
    },
    "131": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "\"data_to_sign\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"data_to_sign\"",
        "new_state_value%0#0"
      ]
    },
    "133": {
      "op": "app_global_put",
      "stack_out": []
    },
    "134": {
      "retsub": true,
      "op": "retsub"
    },
    "135": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "138": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "bz __puya_arc4_router___after_if_else@11",
      "stack_out": []
    },
    "143": {
      "op": "pushbytess 0x2c935847 0xb4ed4f93 0xd8b2c866 0x1f7a4a13 0x736ea3d4 0x7bda2dfa // method \"create(address,byte[],address,byte[],uint64,uint64)void\", method \"set_ready()void\", method \"get_contract_state()uint64\", method \"leaky_refund(byte[])void\", method \"leaky_claim(byte[])void\", method \"punish_refund()void\""
    },
    "175": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create(address,byte[],address,byte[],uint64,uint64)void)",
        "Method(get_contract_state()uint64)",
        "Method(leaky_claim(byte[])void)",
        "Method(leaky_refund(byte[])void)",
        "Method(punish_refund()void)",
        "Method(set_ready()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(address,byte[],address,byte[],uint64,uint64)void)",
        "Method(set_ready()void)",
        "Method(get_contract_state()uint64)",
        "Method(leaky_refund(byte[])void)",
        "Method(leaky_claim(byte[])void)",
        "Method(punish_refund()void)",
        "tmp%2#0"
      ]
    },
    "178": {
      "op": "match __puya_arc4_router___create_route@2 __puya_arc4_router___set_ready_route@3 __puya_arc4_router___get_contract_state_route@4 __puya_arc4_router___leaky_refund_route@5 __puya_arc4_router___leaky_claim_route@6 __puya_arc4_router___punish_refund_route@7",
      "stack_out": []
    },
    "192": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "193": {
      "retsub": true,
      "op": "retsub"
    },
    "194": {
      "block": "__puya_arc4_router___create_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "196": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "197": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "201": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "202": {
      "op": "txna ApplicationArgs 1"
    },
    "205": {
      "op": "txna ApplicationArgs 2"
    },
    "208": {
      "op": "txna ApplicationArgs 3"
    },
    "211": {
      "op": "txna ApplicationArgs 4"
    },
    "214": {
      "op": "txna ApplicationArgs 5"
    },
    "217": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "220": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.create",
      "op": "callsub create",
      "stack_out": []
    },
    "223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "224": {
      "retsub": true,
      "op": "retsub"
    },
    "225": {
      "block": "__puya_arc4_router___set_ready_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.set_ready",
      "op": "callsub set_ready"
    },
    "235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "236": {
      "retsub": true,
      "op": "retsub"
    },
    "237": {
      "block": "__puya_arc4_router___get_contract_state_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "239": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "240": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "241": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "243": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "244": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.get_contract_state",
      "op": "callsub get_contract_state",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "247": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "254": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "255": {
      "op": "log",
      "stack_out": []
    },
    "256": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "257": {
      "retsub": true,
      "op": "retsub"
    },
    "258": {
      "block": "__puya_arc4_router___leaky_refund_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "268": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.leaky_refund",
      "op": "callsub leaky_refund",
      "stack_out": []
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "272": {
      "retsub": true,
      "op": "retsub"
    },
    "273": {
      "block": "__puya_arc4_router___leaky_claim_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "275": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "276": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "277": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "279": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "280": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "283": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.leaky_claim",
      "op": "callsub leaky_claim",
      "stack_out": []
    },
    "286": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    },
    "288": {
      "block": "__puya_arc4_router___punish_refund_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "290": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "291": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "292": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "294": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "295": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.punish_refund",
      "op": "callsub punish_refund"
    },
    "298": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "299": {
      "retsub": true,
      "op": "retsub"
    },
    "300": {
      "block": "__puya_arc4_router___after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "301": {
      "retsub": true,
      "op": "retsub"
    },
    "302": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.create",
      "params": {
        "ali_algo_addr#0": "bytes",
        "ali_xternal_pk#0": "bytes",
        "xin_algo_addr#0": "bytes",
        "xin_xternal_pk#0": "bytes",
        "t0#0": "bytes",
        "t1#0": "bytes"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "305": {
      "op": "bytec_0 // 0x616c695f616c676f5f61646472",
      "defined_out": [
        "0x616c695f616c676f5f61646472"
      ],
      "stack_out": [
        "0x616c695f616c676f5f61646472"
      ]
    },
    "306": {
      "op": "frame_dig -6",
      "defined_out": [
        "0x616c695f616c676f5f61646472",
        "ali_algo_addr#0 (copy)"
      ],
      "stack_out": [
        "0x616c695f616c676f5f61646472",
        "ali_algo_addr#0 (copy)"
      ]
    },
    "308": {
      "op": "app_global_put",
      "stack_out": []
    },
    "309": {
      "op": "bytec 6 // 0x616c695f787465726e616c5f706b",
      "defined_out": [
        "0x616c695f787465726e616c5f706b"
      ],
      "stack_out": [
        "0x616c695f787465726e616c5f706b"
      ]
    },
    "311": {
      "op": "frame_dig -5",
      "defined_out": [
        "0x616c695f787465726e616c5f706b",
        "ali_xternal_pk#0 (copy)"
      ],
      "stack_out": [
        "0x616c695f787465726e616c5f706b",
        "ali_xternal_pk#0 (copy)"
      ]
    },
    "313": {
      "op": "app_global_put",
      "stack_out": []
    },
    "314": {
      "op": "bytec 4 // 0x78696e5f616c676f5f61646472",
      "defined_out": [
        "0x78696e5f616c676f5f61646472"
      ],
      "stack_out": [
        "0x78696e5f616c676f5f61646472"
      ]
    },
    "316": {
      "op": "frame_dig -4",
      "defined_out": [
        "0x78696e5f616c676f5f61646472",
        "xin_algo_addr#0 (copy)"
      ],
      "stack_out": [
        "0x78696e5f616c676f5f61646472",
        "xin_algo_addr#0 (copy)"
      ]
    },
    "318": {
      "op": "app_global_put",
      "stack_out": []
    },
    "319": {
      "op": "bytec 7 // 0x78696e5f787465726e616c5f706b",
      "defined_out": [
        "0x78696e5f787465726e616c5f706b"
      ],
      "stack_out": [
        "0x78696e5f787465726e616c5f706b"
      ]
    },
    "321": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x78696e5f787465726e616c5f706b",
        "xin_xternal_pk#0 (copy)"
      ],
      "stack_out": [
        "0x78696e5f787465726e616c5f706b",
        "xin_xternal_pk#0 (copy)"
      ]
    },
    "323": {
      "op": "app_global_put",
      "stack_out": []
    },
    "324": {
      "op": "bytec_1 // 0x74305f74696d657374616d70",
      "defined_out": [
        "0x74305f74696d657374616d70"
      ],
      "stack_out": [
        "0x74305f74696d657374616d70"
      ]
    },
    "325": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x74305f74696d657374616d70",
        "t0#0 (copy)"
      ],
      "stack_out": [
        "0x74305f74696d657374616d70",
        "t0#0 (copy)"
      ]
    },
    "327": {
      "op": "app_global_put",
      "stack_out": []
    },
    "328": {
      "op": "bytec_2 // 0x74315f74696d657374616d70",
      "defined_out": [
        "0x74315f74696d657374616d70"
      ],
      "stack_out": [
        "0x74315f74696d657374616d70"
      ]
    },
    "329": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x74315f74696d657374616d70",
        "t1#0 (copy)"
      ],
      "stack_out": [
        "0x74315f74696d657374616d70",
        "t1#0 (copy)"
      ]
    },
    "331": {
      "op": "app_global_put",
      "stack_out": []
    },
    "332": {
      "op": "bytec_3 // 0x616c695f7265616479",
      "defined_out": [
        "0x616c695f7265616479"
      ],
      "stack_out": [
        "0x616c695f7265616479"
      ]
    },
    "333": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "0x616c695f7265616479"
      ],
      "stack_out": [
        "0x616c695f7265616479",
        "0x00"
      ]
    },
    "336": {
      "op": "app_global_put",
      "stack_out": []
    },
    "337": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "338": {
      "op": "bytec_1 // 0x74305f74696d657374616d70",
      "stack_out": [
        "0",
        "0x74305f74696d657374616d70"
      ]
    },
    "339": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "340": {
      "error": "check self.t0 exists",
      "op": "assert // check self.t0 exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "341": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "343": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "344": {
      "op": "b>",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "345": {
      "op": "assert",
      "stack_out": []
    },
    "346": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "347": {
      "op": "bytec_2 // 0x74315f74696d657374616d70",
      "stack_out": [
        "0",
        "0x74315f74696d657374616d70"
      ]
    },
    "348": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "349": {
      "error": "check self.t1 exists",
      "op": "assert // check self.t1 exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "350": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "351": {
      "op": "bytec_1 // 0x74305f74696d657374616d70",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "0x74305f74696d657374616d70"
      ]
    },
    "352": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "353": {
      "error": "check self.t0 exists",
      "op": "assert // check self.t0 exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "354": {
      "op": "b>",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "355": {
      "op": "assert",
      "stack_out": []
    },
    "356": {
      "retsub": true,
      "op": "retsub"
    },
    "357": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.set_ready",
      "params": {},
      "block": "set_ready",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "360": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "363": {
      "op": "bytec_0 // 0x616c695f616c676f5f61646472",
      "defined_out": [
        "0",
        "0x616c695f616c676f5f61646472",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x616c695f616c676f5f61646472"
      ]
    },
    "364": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "365": {
      "error": "check self.ali_algo_addr exists",
      "op": "assert // check self.ali_algo_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "366": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "367": {
      "op": "assert",
      "stack_out": []
    },
    "368": {
      "op": "bytec_3 // 0x616c695f7265616479",
      "defined_out": [
        "0x616c695f7265616479"
      ],
      "stack_out": [
        "0x616c695f7265616479"
      ]
    },
    "369": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x616c695f7265616479",
        "0x80"
      ],
      "stack_out": [
        "0x616c695f7265616479",
        "0x80"
      ]
    },
    "372": {
      "op": "app_global_put",
      "stack_out": []
    },
    "373": {
      "retsub": true,
      "op": "retsub"
    },
    "374": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.get_contract_state",
      "params": {},
      "block": "get_contract_state",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "377": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "378": {
      "op": "bytec_3 // 0x616c695f7265616479",
      "defined_out": [
        "0",
        "0x616c695f7265616479"
      ],
      "stack_out": [
        "0",
        "0x616c695f7265616479"
      ]
    },
    "379": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "380": {
      "error": "check self.ali_ready exists",
      "op": "assert // check self.ali_ready exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "381": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "384": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "385": {
      "op": "bz get_contract_state_after_if_else@2",
      "stack_out": []
    },
    "388": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "398": {
      "retsub": true,
      "op": "retsub"
    },
    "399": {
      "block": "get_contract_state_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "400": {
      "op": "bytec_1 // 0x74305f74696d657374616d70",
      "defined_out": [
        "0",
        "0x74305f74696d657374616d70"
      ],
      "stack_out": [
        "0",
        "0x74305f74696d657374616d70"
      ]
    },
    "401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "402": {
      "error": "check self.t0 exists",
      "op": "assert // check self.t0 exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "403": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "405": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "406": {
      "op": "b<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "407": {
      "op": "bz get_contract_state_after_if_else@4",
      "stack_out": []
    },
    "410": {
      "op": "pushbytes 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "420": {
      "retsub": true,
      "op": "retsub"
    },
    "421": {
      "block": "get_contract_state_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "422": {
      "op": "bytec_2 // 0x74315f74696d657374616d70",
      "defined_out": [
        "0",
        "0x74315f74696d657374616d70"
      ],
      "stack_out": [
        "0",
        "0x74315f74696d657374616d70"
      ]
    },
    "423": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "424": {
      "error": "check self.t1 exists",
      "op": "assert // check self.t1 exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "425": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%4#0"
      ]
    },
    "427": {
      "op": "itob",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%5#0"
      ]
    },
    "428": {
      "op": "b<",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "429": {
      "op": "bz get_contract_state_after_if_else@6",
      "stack_out": []
    },
    "432": {
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "442": {
      "retsub": true,
      "op": "retsub"
    },
    "443": {
      "block": "get_contract_state_after_if_else@6",
      "stack_in": [],
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "453": {
      "retsub": true,
      "op": "retsub"
    },
    "454": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.leaky_refund",
      "params": {
        "signature#0": "bytes"
      },
      "block": "leaky_refund",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "457": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "459": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "460": {
      "op": "bytec_0 // 0x616c695f616c676f5f61646472",
      "defined_out": [
        "0",
        "0x616c695f616c676f5f61646472",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x616c695f616c676f5f61646472"
      ]
    },
    "461": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "462": {
      "error": "check self.ali_algo_addr exists",
      "op": "assert // check self.ali_algo_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "464": {
      "op": "assert",
      "stack_out": []
    },
    "465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "466": {
      "op": "bytec_1 // 0x74305f74696d657374616d70",
      "defined_out": [
        "0",
        "0x74305f74696d657374616d70"
      ],
      "stack_out": [
        "0",
        "0x74305f74696d657374616d70"
      ]
    },
    "467": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "468": {
      "error": "check self.t0 exists",
      "op": "assert // check self.t0 exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "469": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "471": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "472": {
      "op": "b>=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "473": {
      "op": "assert",
      "stack_out": []
    },
    "474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "475": {
      "op": "bytec_3 // 0x616c695f7265616479",
      "defined_out": [
        "0",
        "0x616c695f7265616479"
      ],
      "stack_out": [
        "0",
        "0x616c695f7265616479"
      ]
    },
    "476": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "477": {
      "error": "check self.ali_ready exists",
      "op": "assert // check self.ali_ready exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "479": {
      "op": "getbit",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "480": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "481": {
      "op": "assert",
      "stack_out": []
    },
    "482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "483": {
      "op": "bytec 6 // 0x616c695f787465726e616c5f706b",
      "defined_out": [
        "0",
        "0x616c695f787465726e616c5f706b"
      ],
      "stack_out": [
        "0",
        "0x616c695f787465726e616c5f706b"
      ]
    },
    "485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "486": {
      "error": "check self.ali_xternal_pk exists",
      "op": "assert // check self.ali_xternal_pk exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "487": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "signature#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "signature#0 (copy)"
      ]
    },
    "489": {
      "op": "swap",
      "stack_out": [
        "signature#0 (copy)",
        "maybe_value%3#0"
      ]
    },
    "490": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.leaky_verify_ed25519",
      "op": "callsub leaky_verify_ed25519",
      "defined_out": [
        "leaky_verify_ed25519%1#0",
        "signature#0"
      ],
      "stack_out": [
        "signature#0",
        "leaky_verify_ed25519%1#0"
      ]
    },
    "493": {
      "op": "pop",
      "stack_out": [
        "signature#0"
      ]
    },
    "494": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "496": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "497": {
      "op": "bytec_0 // 0x616c695f616c676f5f61646472",
      "stack_out": [
        "0",
        "0x616c695f616c676f5f61646472"
      ]
    },
    "498": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "499": {
      "error": "check self.ali_algo_addr exists",
      "op": "assert // check self.ali_algo_addr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "500": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.disburse_funds",
      "op": "callsub disburse_funds",
      "stack_out": []
    },
    "503": {
      "retsub": true,
      "op": "retsub"
    },
    "504": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.leaky_verify_ed25519",
      "params": {
        "signature#0": "bytes",
        "xternal_pk#0": "bytes"
      },
      "block": "leaky_verify_ed25519",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "507": {
      "op": "frame_dig -2",
      "defined_out": [
        "signature#0 (copy)"
      ],
      "stack_out": [
        "signature#0 (copy)"
      ]
    },
    "509": {
      "op": "extract 0 32",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "512": {
      "op": "pushbytes 0x5866666666666666666666666666666666666666666666666666666666666666",
      "defined_out": [
        "0x5866666666666666666666666666666666666666666666666666666666666666",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x5866666666666666666666666666666666666666666666666666666666666666"
      ]
    },
    "546": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "547": {
      "op": "assert",
      "stack_out": []
    },
    "548": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "549": {
      "op": "bytec 5 // \"data_to_sign\"",
      "defined_out": [
        "\"data_to_sign\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"data_to_sign\""
      ]
    },
    "551": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "552": {
      "error": "check self.data_to_sign exists",
      "op": "assert // check self.data_to_sign exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "553": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%0#0",
        "signature#0 (copy)"
      ]
    },
    "555": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "signature#0 (copy)",
        "xternal_pk#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "signature#0 (copy)",
        "xternal_pk#0 (copy)"
      ]
    },
    "557": {
      "op": "ed25519verify_bare",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "558": {
      "op": "assert",
      "stack_out": []
    },
    "559": {
      "op": "frame_dig -2",
      "stack_out": [
        "signature#0 (copy)"
      ]
    },
    "561": {
      "op": "frame_dig -1",
      "stack_out": [
        "signature#0 (copy)",
        "xternal_pk#0 (copy)"
      ]
    },
    "563": {
      "retsub": true,
      "op": "retsub"
    },
    "564": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.disburse_funds",
      "params": {
        "recipient#0": "bytes"
      },
      "block": "disburse_funds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "567": {
      "op": "itxn_begin"
    },
    "568": {
      "op": "frame_dig -1",
      "defined_out": [
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "recipient#0 (copy)"
      ]
    },
    "570": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "572": {
      "op": "frame_dig -1",
      "stack_out": [
        "recipient#0 (copy)"
      ]
    },
    "574": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "576": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "577": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "579": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "580": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "582": {
      "op": "itxn_submit"
    },
    "583": {
      "retsub": true,
      "op": "retsub"
    },
    "584": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.leaky_claim",
      "params": {
        "signature#0": "bytes"
      },
      "block": "leaky_claim",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "587": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "589": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "590": {
      "op": "bytec 4 // 0x78696e5f616c676f5f61646472",
      "defined_out": [
        "0",
        "0x78696e5f616c676f5f61646472",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78696e5f616c676f5f61646472"
      ]
    },
    "592": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "593": {
      "error": "check self.xin_algo_addr exists",
      "op": "assert // check self.xin_algo_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "594": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "595": {
      "op": "assert",
      "stack_out": []
    },
    "596": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "597": {
      "op": "bytec_1 // 0x74305f74696d657374616d70",
      "defined_out": [
        "0",
        "0x74305f74696d657374616d70"
      ],
      "stack_out": [
        "0",
        "0x74305f74696d657374616d70"
      ]
    },
    "598": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "599": {
      "error": "check self.t0 exists",
      "op": "assert // check self.t0 exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "600": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "602": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "603": {
      "op": "b<",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "604": {
      "op": "bnz leaky_claim_bool_true@2",
      "stack_out": []
    },
    "607": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "608": {
      "op": "bytec_3 // 0x616c695f7265616479",
      "defined_out": [
        "0",
        "0x616c695f7265616479"
      ],
      "stack_out": [
        "0",
        "0x616c695f7265616479"
      ]
    },
    "609": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "610": {
      "error": "check self.ali_ready exists",
      "op": "assert // check self.ali_ready exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "611": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "612": {
      "op": "getbit",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "613": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1"
      ]
    },
    "614": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "615": {
      "op": "bz leaky_claim_bool_false@3",
      "stack_out": []
    },
    "618": {
      "block": "leaky_claim_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "619": {
      "op": "b leaky_claim_bool_merge@4"
    },
    "622": {
      "block": "leaky_claim_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "623": {
      "block": "leaky_claim_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "624": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "625": {
      "op": "bytec_2 // 0x74315f74696d657374616d70",
      "defined_out": [
        "0",
        "0x74315f74696d657374616d70"
      ],
      "stack_out": [
        "0",
        "0x74315f74696d657374616d70"
      ]
    },
    "626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "627": {
      "error": "check self.t1 exists",
      "op": "assert // check self.t1 exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "628": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%7#0"
      ]
    },
    "630": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%8#0"
      ]
    },
    "631": {
      "op": "b>=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "632": {
      "op": "assert",
      "stack_out": []
    },
    "633": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "634": {
      "op": "bytec 7 // 0x78696e5f787465726e616c5f706b",
      "defined_out": [
        "0",
        "0x78696e5f787465726e616c5f706b"
      ],
      "stack_out": [
        "0",
        "0x78696e5f787465726e616c5f706b"
      ]
    },
    "636": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "637": {
      "error": "check self.xin_xternal_pk exists",
      "op": "assert // check self.xin_xternal_pk exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "638": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "signature#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "signature#0 (copy)"
      ]
    },
    "640": {
      "op": "swap",
      "stack_out": [
        "signature#0 (copy)",
        "maybe_value%4#0"
      ]
    },
    "641": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.leaky_verify_ed25519",
      "op": "callsub leaky_verify_ed25519",
      "defined_out": [
        "leaky_verify_ed25519%1#0",
        "signature#0"
      ],
      "stack_out": [
        "signature#0",
        "leaky_verify_ed25519%1#0"
      ]
    },
    "644": {
      "op": "pop",
      "stack_out": [
        "signature#0"
      ]
    },
    "645": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "647": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "648": {
      "op": "bytec 4 // 0x78696e5f616c676f5f61646472",
      "defined_out": [
        "0",
        "0x78696e5f616c676f5f61646472"
      ],
      "stack_out": [
        "0",
        "0x78696e5f616c676f5f61646472"
      ]
    },
    "650": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "651": {
      "error": "check self.xin_algo_addr exists",
      "op": "assert // check self.xin_algo_addr exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "652": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.disburse_funds",
      "op": "callsub disburse_funds",
      "stack_out": []
    },
    "655": {
      "retsub": true,
      "op": "retsub"
    },
    "656": {
      "subroutine": "smart_contracts.leak_swap.contract.LeakSwap.punish_refund",
      "params": {},
      "block": "punish_refund",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "659": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "661": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "662": {
      "op": "bytec_0 // 0x616c695f616c676f5f61646472",
      "defined_out": [
        "0",
        "0x616c695f616c676f5f61646472",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x616c695f616c676f5f61646472"
      ]
    },
    "663": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "664": {
      "error": "check self.ali_algo_addr exists",
      "op": "assert // check self.ali_algo_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "665": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "666": {
      "op": "assert",
      "stack_out": []
    },
    "667": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "668": {
      "op": "bytec_2 // 0x74315f74696d657374616d70",
      "defined_out": [
        "0",
        "0x74315f74696d657374616d70"
      ],
      "stack_out": [
        "0",
        "0x74315f74696d657374616d70"
      ]
    },
    "669": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "670": {
      "error": "check self.t1 exists",
      "op": "assert // check self.t1 exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "671": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "673": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "674": {
      "op": "b<",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "675": {
      "op": "assert",
      "stack_out": []
    },
    "676": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "677": {
      "op": "bytec_0 // 0x616c695f616c676f5f61646472",
      "stack_out": [
        "0",
        "0x616c695f616c676f5f61646472"
      ]
    },
    "678": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "679": {
      "error": "check self.ali_algo_addr exists",
      "op": "assert // check self.ali_algo_addr exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "680": {
      "callsub": "smart_contracts.leak_swap.contract.LeakSwap.disburse_funds",
      "op": "callsub disburse_funds",
      "stack_out": []
    },
    "683": {
      "retsub": true,
      "op": "retsub"
    }
  }
}