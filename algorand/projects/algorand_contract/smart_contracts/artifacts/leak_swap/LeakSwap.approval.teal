#pragma version 10

smart_contracts.leak_swap.contract.LeakSwap.approval_program:
    intcblock 0 1
    bytecblock 0x616c695f616c676f5f61646472 0x74305f74696d657374616d70 0x74315f74696d657374616d70 0x616c695f7265616479 0x78696e5f616c676f5f61646472 "data_to_sign" 0x616c695f787465726e616c5f706b 0x78696e5f787465726e616c5f706b
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.leak_swap.contract.LeakSwap.__init__() -> void:
__init__:
    // smart_contracts/leak_swap/contract.py:19
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/leak_swap/contract.py:35
    // self.data_to_sign = Global.current_application_address.bytes
    bytec 5 // "data_to_sign"
    global CurrentApplicationAddress
    app_global_put
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/leak_swap/contract.py:16-18
    // # Ali <-- Algo/ASA asset holder, wants to swap for foreign asset
    // # Xin <-- Foreign asset holder, wants to swap for Algo/ASA asset
    // class LeakSwap(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@11
    pushbytess 0x2c935847 0xb4ed4f93 0xd8b2c866 0x1f7a4a13 0x736ea3d4 0x7bda2dfa // method "create(address,byte[],address,byte[],uint64,uint64)void", method "set_ready()void", method "get_contract_state()uint64", method "leaky_refund(byte[])void", method "leaky_claim(byte[])void", method "punish_refund()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___set_ready_route@3 __puya_arc4_router___get_contract_state_route@4 __puya_arc4_router___leaky_refund_route@5 __puya_arc4_router___leaky_claim_route@6 __puya_arc4_router___punish_refund_route@7
    intc_0 // 0
    retsub

__puya_arc4_router___create_route@2:
    // smart_contracts/leak_swap/contract.py:37
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/leak_swap/contract.py:16-18
    // # Ali <-- Algo/ASA asset holder, wants to swap for foreign asset
    // # Xin <-- Foreign asset holder, wants to swap for Algo/ASA asset
    // class LeakSwap(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    // smart_contracts/leak_swap/contract.py:37
    // @arc4.abimethod(create="require")
    callsub create
    intc_1 // 1
    retsub

__puya_arc4_router___set_ready_route@3:
    // smart_contracts/leak_swap/contract.py:109
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub set_ready
    intc_1 // 1
    retsub

__puya_arc4_router___get_contract_state_route@4:
    // smart_contracts/leak_swap/contract.py:118
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_contract_state
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___leaky_refund_route@5:
    // smart_contracts/leak_swap/contract.py:134
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/leak_swap/contract.py:16-18
    // # Ali <-- Algo/ASA asset holder, wants to swap for foreign asset
    // # Xin <-- Foreign asset holder, wants to swap for Algo/ASA asset
    // class LeakSwap(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/leak_swap/contract.py:134
    // @arc4.abimethod()
    callsub leaky_refund
    intc_1 // 1
    retsub

__puya_arc4_router___leaky_claim_route@6:
    // smart_contracts/leak_swap/contract.py:154
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/leak_swap/contract.py:16-18
    // # Ali <-- Algo/ASA asset holder, wants to swap for foreign asset
    // # Xin <-- Foreign asset holder, wants to swap for Algo/ASA asset
    // class LeakSwap(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/leak_swap/contract.py:154
    // @arc4.abimethod()
    callsub leaky_claim
    intc_1 // 1
    retsub

__puya_arc4_router___punish_refund_route@7:
    // smart_contracts/leak_swap/contract.py:177
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub punish_refund
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@11:
    // smart_contracts/leak_swap/contract.py:16-18
    // # Ali <-- Algo/ASA asset holder, wants to swap for foreign asset
    // # Xin <-- Foreign asset holder, wants to swap for Algo/ASA asset
    // class LeakSwap(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.create(ali_algo_addr: bytes, ali_xternal_pk: bytes, xin_algo_addr: bytes, xin_xternal_pk: bytes, t0: bytes, t1: bytes) -> void:
create:
    // smart_contracts/leak_swap/contract.py:37-45
    // @arc4.abimethod(create="require")
    // def create(self,
    //            ali_algo_addr: arc4.Address,
    //            ali_xternal_pk: arc4.DynamicBytes,
    //            xin_algo_addr: arc4.Address,
    //            xin_xternal_pk: arc4.DynamicBytes,
    //            t0: arc4.UInt64,
    //            t1: arc4.UInt64,
    // ) -> None:
    proto 6 0
    // smart_contracts/leak_swap/contract.py:49
    // self.ali_algo_addr.value = ali_algo_addr
    bytec_0 // 0x616c695f616c676f5f61646472
    frame_dig -6
    app_global_put
    // smart_contracts/leak_swap/contract.py:50
    // self.ali_xternal_pk.value = ali_xternal_pk.copy()
    bytec 6 // 0x616c695f787465726e616c5f706b
    frame_dig -5
    app_global_put
    // smart_contracts/leak_swap/contract.py:51
    // self.xin_algo_addr.value = xin_algo_addr
    bytec 4 // 0x78696e5f616c676f5f61646472
    frame_dig -4
    app_global_put
    // smart_contracts/leak_swap/contract.py:52
    // self.xin_xternal_pk.value = xin_xternal_pk.copy()
    bytec 7 // 0x78696e5f787465726e616c5f706b
    frame_dig -3
    app_global_put
    // smart_contracts/leak_swap/contract.py:53
    // self.t0.value = t0
    bytec_1 // 0x74305f74696d657374616d70
    frame_dig -2
    app_global_put
    // smart_contracts/leak_swap/contract.py:54
    // self.t1.value = t1
    bytec_2 // 0x74315f74696d657374616d70
    frame_dig -1
    app_global_put
    // smart_contracts/leak_swap/contract.py:56
    // self.ali_ready.value = arc4.Bool(False)
    bytec_3 // 0x616c695f7265616479
    pushbytes 0x00
    app_global_put
    // smart_contracts/leak_swap/contract.py:58
    // assert self.t0.value > Global.latest_timestamp
    intc_0 // 0
    bytec_1 // 0x74305f74696d657374616d70
    app_global_get_ex
    assert // check self.t0 exists
    global LatestTimestamp
    itob
    b>
    assert
    // smart_contracts/leak_swap/contract.py:59
    // assert self.t1.value > self.t0.value
    intc_0 // 0
    bytec_2 // 0x74315f74696d657374616d70
    app_global_get_ex
    assert // check self.t1 exists
    intc_0 // 0
    bytec_1 // 0x74305f74696d657374616d70
    app_global_get_ex
    assert // check self.t0 exists
    b>
    assert
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.set_ready() -> void:
set_ready:
    // smart_contracts/leak_swap/contract.py:109-110
    // @arc4.abimethod()
    // def set_ready(self) -> None:
    proto 0 0
    // smart_contracts/leak_swap/contract.py:115
    // assert Txn.sender == self.ali_algo_addr.value.native
    txn Sender
    intc_0 // 0
    bytec_0 // 0x616c695f616c676f5f61646472
    app_global_get_ex
    assert // check self.ali_algo_addr exists
    ==
    assert
    // smart_contracts/leak_swap/contract.py:116
    // self.ali_ready.value = arc4.Bool(True)
    bytec_3 // 0x616c695f7265616479
    pushbytes 0x80
    app_global_put
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.get_contract_state() -> bytes:
get_contract_state:
    // smart_contracts/leak_swap/contract.py:118-119
    // @arc4.abimethod(readonly=True)
    // def get_contract_state(self) -> arc4.UInt64:
    proto 0 1
    // smart_contracts/leak_swap/contract.py:126
    // if self.ali_ready.value:
    intc_0 // 0
    bytec_3 // 0x616c695f7265616479
    app_global_get_ex
    assert // check self.ali_ready exists
    pushbytes 0x00
    !=
    bz get_contract_state_after_if_else@2
    // smart_contracts/leak_swap/contract.py:127
    // return arc4.UInt64(1)
    pushbytes 0x0000000000000001
    retsub

get_contract_state_after_if_else@2:
    // smart_contracts/leak_swap/contract.py:128
    // if Global.latest_timestamp > self.t0.value:
    intc_0 // 0
    bytec_1 // 0x74305f74696d657374616d70
    app_global_get_ex
    assert // check self.t0 exists
    global LatestTimestamp
    itob
    b<
    bz get_contract_state_after_if_else@4
    // smart_contracts/leak_swap/contract.py:129
    // return arc4.UInt64(2)
    pushbytes 0x0000000000000002
    retsub

get_contract_state_after_if_else@4:
    // smart_contracts/leak_swap/contract.py:130
    // if Global.latest_timestamp > self.t1.value:
    intc_0 // 0
    bytec_2 // 0x74315f74696d657374616d70
    app_global_get_ex
    assert // check self.t1 exists
    global LatestTimestamp
    itob
    b<
    bz get_contract_state_after_if_else@6
    // smart_contracts/leak_swap/contract.py:131
    // return arc4.UInt64(3)
    pushbytes 0x0000000000000003
    retsub

get_contract_state_after_if_else@6:
    // smart_contracts/leak_swap/contract.py:132
    // return arc4.UInt64(0)
    pushbytes 0x0000000000000000
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.leaky_refund(signature: bytes) -> void:
leaky_refund:
    // smart_contracts/leak_swap/contract.py:134-135
    // @arc4.abimethod()
    // def leaky_refund(self, signature: arc4.DynamicBytes) -> None:
    proto 1 0
    // smart_contracts/leak_swap/contract.py:141-142
    // # Check called by Ali
    // assert Txn.sender == self.ali_algo_addr.value.native
    txn Sender
    intc_0 // 0
    bytec_0 // 0x616c695f616c676f5f61646472
    app_global_get_ex
    assert // check self.ali_algo_addr exists
    ==
    assert
    // smart_contracts/leak_swap/contract.py:144-145
    // # Check contract has not passed t0/ready
    // assert Global.latest_timestamp <= self.t0.value
    intc_0 // 0
    bytec_1 // 0x74305f74696d657374616d70
    app_global_get_ex
    assert // check self.t0 exists
    global LatestTimestamp
    itob
    b>=
    assert
    // smart_contracts/leak_swap/contract.py:146
    // assert self.ali_ready.value == False
    intc_0 // 0
    bytec_3 // 0x616c695f7265616479
    app_global_get_ex
    assert // check self.ali_ready exists
    intc_0 // 0
    getbit
    !
    assert
    // smart_contracts/leak_swap/contract.py:148-149
    // # Force Ali to leak xternal secret key
    // self.leaky_verify_ed25519(signature, self.ali_xternal_pk.value.copy())
    intc_0 // 0
    bytec 6 // 0x616c695f787465726e616c5f706b
    app_global_get_ex
    assert // check self.ali_xternal_pk exists
    frame_dig -1
    swap
    callsub leaky_verify_ed25519
    pop
    frame_bury -1
    // smart_contracts/leak_swap/contract.py:151-152
    // # Return Ali's funds
    // self.disburse_funds(self.ali_algo_addr.value)
    intc_0 // 0
    bytec_0 // 0x616c695f616c676f5f61646472
    app_global_get_ex
    assert // check self.ali_algo_addr exists
    callsub disburse_funds
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.leaky_verify_ed25519(signature: bytes, xternal_pk: bytes) -> bytes, bytes:
leaky_verify_ed25519:
    // smart_contracts/leak_swap/contract.py:92-93
    // @subroutine
    // def leaky_verify_ed25519(self, signature: arc4.DynamicBytes, xternal_pk: arc4.DynamicBytes) -> None:
    proto 2 2
    // smart_contracts/leak_swap/contract.py:99
    // assert op.extract(signature.bytes, 0, 32) == Bytes(b"Xfffffffffffffffffffffffffffffff")
    frame_dig -2
    extract 0 32
    pushbytes 0x5866666666666666666666666666666666666666666666666666666666666666
    ==
    assert
    // smart_contracts/leak_swap/contract.py:100
    // assert op.ed25519verify_bare(self.data_to_sign, signature.bytes, xternal_pk.bytes)
    intc_0 // 0
    bytec 5 // "data_to_sign"
    app_global_get_ex
    assert // check self.data_to_sign exists
    frame_dig -2
    frame_dig -1
    ed25519verify_bare
    assert
    frame_dig -2
    frame_dig -1
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.disburse_funds(recipient: bytes) -> void:
disburse_funds:
    // smart_contracts/leak_swap/contract.py:68-69
    // @subroutine
    // def disburse_funds(self, recipient: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/leak_swap/contract.py:73-77
    // itxn.Payment(
    //     receiver=recipient.native,
    //     close_remainder_to=recipient.native,
    //     fee=0,
    // ).submit()
    itxn_begin
    frame_dig -1
    itxn_field CloseRemainderTo
    frame_dig -1
    itxn_field Receiver
    // smart_contracts/leak_swap/contract.py:73
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/leak_swap/contract.py:76
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/leak_swap/contract.py:73-77
    // itxn.Payment(
    //     receiver=recipient.native,
    //     close_remainder_to=recipient.native,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.leaky_claim(signature: bytes) -> void:
leaky_claim:
    // smart_contracts/leak_swap/contract.py:154-155
    // @arc4.abimethod()
    // def leaky_claim(self, signature: arc4.DynamicBytes) -> None:
    proto 1 0
    // smart_contracts/leak_swap/contract.py:161-162
    // # Check called by Xin
    // assert Txn.sender == self.xin_algo_addr.value.native
    txn Sender
    intc_0 // 0
    bytec 4 // 0x78696e5f616c676f5f61646472
    app_global_get_ex
    assert // check self.xin_algo_addr exists
    ==
    assert
    // smart_contracts/leak_swap/contract.py:166
    // Global.latest_timestamp > self.t0.value or self.ali_ready.value == True
    intc_0 // 0
    bytec_1 // 0x74305f74696d657374616d70
    app_global_get_ex
    assert // check self.t0 exists
    global LatestTimestamp
    itob
    b<
    bnz leaky_claim_bool_true@2
    intc_0 // 0
    bytec_3 // 0x616c695f7265616479
    app_global_get_ex
    assert // check self.ali_ready exists
    intc_0 // 0
    getbit
    intc_1 // 1
    ==
    bz leaky_claim_bool_false@3

leaky_claim_bool_true@2:
    intc_1 // 1
    b leaky_claim_bool_merge@4

leaky_claim_bool_false@3:
    intc_0 // 0

leaky_claim_bool_merge@4:
    // smart_contracts/leak_swap/contract.py:164-167
    // # Check contract has passed t0/ready
    // assert (
    //     Global.latest_timestamp > self.t0.value or self.ali_ready.value == True
    // )
    assert
    // smart_contracts/leak_swap/contract.py:168-169
    // # Check contract has not passed t1
    // assert Global.latest_timestamp <= self.t1.value
    intc_0 // 0
    bytec_2 // 0x74315f74696d657374616d70
    app_global_get_ex
    assert // check self.t1 exists
    global LatestTimestamp
    itob
    b>=
    assert
    // smart_contracts/leak_swap/contract.py:171-172
    // # Force Xin to leak xternal secret key
    // self.leaky_verify_ed25519(signature, self.xin_xternal_pk.value.copy())
    intc_0 // 0
    bytec 7 // 0x78696e5f787465726e616c5f706b
    app_global_get_ex
    assert // check self.xin_xternal_pk exists
    frame_dig -1
    swap
    callsub leaky_verify_ed25519
    pop
    frame_bury -1
    // smart_contracts/leak_swap/contract.py:174-175
    // # Disburse funds to Xin
    // self.disburse_funds(self.xin_algo_addr.value)
    intc_0 // 0
    bytec 4 // 0x78696e5f616c676f5f61646472
    app_global_get_ex
    assert // check self.xin_algo_addr exists
    callsub disburse_funds
    retsub


// smart_contracts.leak_swap.contract.LeakSwap.punish_refund() -> void:
punish_refund:
    // smart_contracts/leak_swap/contract.py:177-178
    // @arc4.abimethod()
    // def punish_refund(self) -> None:
    proto 0 0
    // smart_contracts/leak_swap/contract.py:179-180
    // # Check called by Ali, in case she wants to punish Xin
    // assert Txn.sender == self.ali_algo_addr.value.native
    txn Sender
    intc_0 // 0
    bytec_0 // 0x616c695f616c676f5f61646472
    app_global_get_ex
    assert // check self.ali_algo_addr exists
    ==
    assert
    // smart_contracts/leak_swap/contract.py:182-183
    // # Check contract has passed t1
    // assert Global.latest_timestamp > self.t1.value
    intc_0 // 0
    bytec_2 // 0x74315f74696d657374616d70
    app_global_get_ex
    assert // check self.t1 exists
    global LatestTimestamp
    itob
    b<
    assert
    // smart_contracts/leak_swap/contract.py:185-186
    // # Return Ali's funds
    // self.disburse_funds(self.ali_algo_addr.value)
    intc_0 // 0
    bytec_0 // 0x616c695f616c676f5f61646472
    app_global_get_ex
    assert // check self.ali_algo_addr exists
    callsub disburse_funds
    retsub
