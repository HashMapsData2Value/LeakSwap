/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"LeakSwap","structs":{},"methods":[{"name":"createApplication","args":[{"type":"byte[]","name":"aliXternalPK"},{"type":"account","name":"xinAlgoAddr"},{"type":"byte[]","name":"xinXternalPK"},{"type":"uint64","name":"t0"},{"type":"uint64","name":"t1"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"verifySignature","args":[{"type":"byte[]","name":"signature"},{"type":"byte[]","name":"xternalPK"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setReady","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getContractState","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"leakyRefund","args":[{"type":"byte[]","name":"signature"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"leakyClaim","args":[{"type":"byte[]","name":"signature"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"punishRefund","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"aliAlgoAddr":{"keyType":"AVMString","valueType":"address","key":"YWxpQWxnb0FkZHI="},"xinAlgoAddr":{"keyType":"AVMString","valueType":"address","key":"eGluQWxnb0FkZHI="},"aliXternalPK":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWxpWHRlcm5hbFBL"},"xinXternalPK":{"keyType":"AVMString","valueType":"AVMBytes","key":"eGluWHRlcm5hbFBL"},"t0":{"keyType":"AVMString","valueType":"AVMUint64","key":"dDA="},"t1":{"keyType":"AVMString","valueType":"AVMUint64","key":"dDE="},"aliReady":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWxpUmVhZHk="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[592],"errorMessage":"Cannot claim after t1!"},{"pc":[584],"errorMessage":"Cannot claim: time must be past t0 OR Ali must have set ready!"},{"pc":[632],"errorMessage":"Cannot punish refund before t1!"},{"pc":[501],"errorMessage":"Cannot refund after set ready!"},{"pc":[495],"errorMessage":"Cannot refund after t0!"},{"pc":[150,162,180,198,220,232,256],"errorMessage":"OnCompletion is not NoOp"},{"pc":[487],"errorMessage":"Only Ali can do leaky refund!"},{"pc":[624],"errorMessage":"Only Ali can do punish refund!"},{"pc":[435],"errorMessage":"Only Ali can set the contract to ready!"},{"pc":[565],"errorMessage":"Only Xin can do leaky claim!"},{"pc":[418],"errorMessage":"R-point encoding not 0x58666... . Signature R must be broken (=BASEPOINT) to allow the secret key to be leaked!"},{"pc":[426],"errorMessage":"Signature verification failed!"},{"pc":[260],"errorMessage":"can only call when creating"},{"pc":[153,165,183,201,223,235],"errorMessage":"can only call when not creating"},{"pc":[433,445,458,469,485,493,499,506,516,563,571,579,590,597,608,622,630,636],"errorMessage":"check GlobalState exists"},{"pc":[333],"errorMessage":"t0 must be in the future"},{"pc":[327],"errorMessage":"t1 must be greater than t0"},{"pc":[339],"errorMessage":"t1 must be in the future"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmCAthbGlBbGdvQWRkcghhbGlSZWFkeQJ0MAJ0MQt4aW5BbGdvQWRkcgxhbGlYdGVybmFsUEsMeGluWHRlcm5hbFBLAwaBATEYQAADKSJnMRtBADiCBwSt6wbdBCG1GwgEGAQl9gQT8iYoBJ7oTAEE3aiL4wQITnxYNhoAjgcAbABUAEgAMgAgAA4AAiJDMRkURDEYRIgBzCNDMRkURDEYRDYaAVcCAIgBWiNDMRkURDEYRDYaAVcCAIgBHCNDMRkURDEYRIgA6xaABBUffHVMULAjQzEZFEQxGESIAMkjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAHEjQzEZFEQxGBRENhoBVwIANhoCF8AcNhoDVwIANhoEFzYaBReIAAIjQ4oFACgyCWcnBYv7ZycEi/xnJwaL/Wcqi/5nK4v/Z4v/i/4NRIv+MgcNRIv/MgcNRImKAQCxi/+yB4v/sgkisggjshAisgGziYoCAIv+i/+IAAGJigIAi/5XACCAIFhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmEkQyCov+i/+ERIkxACIoZUQSRCkjZ4kyByIrZUQNQQADgQOJMgciKmVEDUEAA4ECiSIpZURBAAIjiSKJigEAMQAiKGVEEkQyByIqZUQORCIpZUQURCInBWVEi/9MiP92IihlRIj/TYmKAQCB2g8yDA1BABixgQayEIEFshknB7IeJweyHyKyAbNC/98xACInBGVEEkQyByIqZUQNQAAHIillREEAHiNEMgciK2VEDEQiJwZlRIv/TIj/GyInBGVEiP7xiSJC/98xACIoZUQSRDIHIitlRA9EIihlRIj+1Yk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LeakSwap contract
 */
export type LeakSwapArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(byte[],account,byte[],uint64,uint64)void': {
      aliXternalPk: Uint8Array
      xinAlgoAddr: Uint8Array | string
      xinXternalPk: Uint8Array
      t0: bigint | number
      t1: bigint | number
    }
    'verifySignature(byte[],byte[])void': {
      signature: Uint8Array
      xternalPk: Uint8Array
    }
    'setReady()void': Record<string, never>
    'getContractState()uint64': Record<string, never>
    'leakyRefund(byte[])void': {
      signature: Uint8Array
    }
    'leakyClaim(byte[])void': {
      signature: Uint8Array
    }
    'punishRefund()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(byte[],account,byte[],uint64,uint64)void': [aliXternalPk: Uint8Array, xinAlgoAddr: Uint8Array | string, xinXternalPk: Uint8Array, t0: bigint | number, t1: bigint | number]
    'verifySignature(byte[],byte[])void': [signature: Uint8Array, xternalPk: Uint8Array]
    'setReady()void': []
    'getContractState()uint64': []
    'leakyRefund(byte[])void': [signature: Uint8Array]
    'leakyClaim(byte[])void': [signature: Uint8Array]
    'punishRefund()void': []
  }
}

/**
 * The return type for each method
 */
export type LeakSwapReturns = {
  'createApplication(byte[],account,byte[],uint64,uint64)void': void
  'verifySignature(byte[],byte[])void': void
  'setReady()void': void
  'getContractState()uint64': bigint
  'leakyRefund(byte[])void': void
  'leakyClaim(byte[])void': void
  'punishRefund()void': void
}

/**
 * Defines the types of available calls and state of the LeakSwap smart contract.
 */
export type LeakSwapTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(byte[],account,byte[],uint64,uint64)void' | 'createApplication', {
      argsObj: LeakSwapArgs['obj']['createApplication(byte[],account,byte[],uint64,uint64)void']
      argsTuple: LeakSwapArgs['tuple']['createApplication(byte[],account,byte[],uint64,uint64)void']
      returns: LeakSwapReturns['createApplication(byte[],account,byte[],uint64,uint64)void']
    }>
    & Record<'verifySignature(byte[],byte[])void' | 'verifySignature', {
      argsObj: LeakSwapArgs['obj']['verifySignature(byte[],byte[])void']
      argsTuple: LeakSwapArgs['tuple']['verifySignature(byte[],byte[])void']
      returns: LeakSwapReturns['verifySignature(byte[],byte[])void']
    }>
    & Record<'setReady()void' | 'setReady', {
      argsObj: LeakSwapArgs['obj']['setReady()void']
      argsTuple: LeakSwapArgs['tuple']['setReady()void']
      returns: LeakSwapReturns['setReady()void']
    }>
    & Record<'getContractState()uint64' | 'getContractState', {
      argsObj: LeakSwapArgs['obj']['getContractState()uint64']
      argsTuple: LeakSwapArgs['tuple']['getContractState()uint64']
      returns: LeakSwapReturns['getContractState()uint64']
    }>
    & Record<'leakyRefund(byte[])void' | 'leakyRefund', {
      argsObj: LeakSwapArgs['obj']['leakyRefund(byte[])void']
      argsTuple: LeakSwapArgs['tuple']['leakyRefund(byte[])void']
      returns: LeakSwapReturns['leakyRefund(byte[])void']
    }>
    & Record<'leakyClaim(byte[])void' | 'leakyClaim', {
      argsObj: LeakSwapArgs['obj']['leakyClaim(byte[])void']
      argsTuple: LeakSwapArgs['tuple']['leakyClaim(byte[])void']
      returns: LeakSwapReturns['leakyClaim(byte[])void']
    }>
    & Record<'punishRefund()void' | 'punishRefund', {
      argsObj: LeakSwapArgs['obj']['punishRefund()void']
      argsTuple: LeakSwapArgs['tuple']['punishRefund()void']
      returns: LeakSwapReturns['punishRefund()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        aliAlgoAddr: string
        xinAlgoAddr: string
        aliXternalPk: BinaryState
        xinXternalPk: BinaryState
        t0: bigint
        t1: bigint
        aliReady: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LeakSwapSignatures = keyof LeakSwapTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LeakSwapNonVoidMethodSignatures = keyof LeakSwapTypes['methods'] extends infer T ? T extends keyof LeakSwapTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LeakSwap smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LeakSwapSignatures> = LeakSwapTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LeakSwap smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LeakSwapSignatures> = LeakSwapTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LeakSwapTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LeakSwapCreateCallParams =
  | Expand<CallParams<LeakSwapArgs['obj']['createApplication(byte[],account,byte[],uint64,uint64)void'] | LeakSwapArgs['tuple']['createApplication(byte[],account,byte[],uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<LeakSwapArgs['obj']['createApplication(byte[],account,byte[],uint64,uint64)void'] | LeakSwapArgs['tuple']['createApplication(byte[],account,byte[],uint64,uint64)void']> & {method: 'createApplication(byte[],account,byte[],uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LeakSwapDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LeakSwapCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LeakSwap smart contract
 */
export abstract class LeakSwapParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends LeakSwapCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(byte[],account,byte[],uint64,uint64)void':
            return LeakSwapParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the LeakSwap smart contract using the createApplication(byte[],account,byte[],uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<LeakSwapArgs['obj']['createApplication(byte[],account,byte[],uint64,uint64)void'] | LeakSwapArgs['tuple']['createApplication(byte[],account,byte[],uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(byte[],account,byte[],uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.aliXternalPk, params.args.xinAlgoAddr, params.args.xinXternalPk, params.args.t0, params.args.t1],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the verifySignature(byte[],byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifySignature(params: CallParams<LeakSwapArgs['obj']['verifySignature(byte[],byte[])void'] | LeakSwapArgs['tuple']['verifySignature(byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verifySignature(byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signature, params.args.xternalPk],
    }
  }
  /**
   * Constructs a no op call for the setReady()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setReady(params: CallParams<LeakSwapArgs['obj']['setReady()void'] | LeakSwapArgs['tuple']['setReady()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setReady()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getContractState()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractState(params: CallParams<LeakSwapArgs['obj']['getContractState()uint64'] | LeakSwapArgs['tuple']['getContractState()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractState()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the leakyRefund(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static leakyRefund(params: CallParams<LeakSwapArgs['obj']['leakyRefund(byte[])void'] | LeakSwapArgs['tuple']['leakyRefund(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'leakyRefund(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signature],
    }
  }
  /**
   * Constructs a no op call for the leakyClaim(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static leakyClaim(params: CallParams<LeakSwapArgs['obj']['leakyClaim(byte[])void'] | LeakSwapArgs['tuple']['leakyClaim(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'leakyClaim(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signature],
    }
  }
  /**
   * Constructs a no op call for the punishRefund()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static punishRefund(params: CallParams<LeakSwapArgs['obj']['punishRefund()void'] | LeakSwapArgs['tuple']['punishRefund()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'punishRefund()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LeakSwap smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LeakSwapFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LeakSwapFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LeakSwapClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LeakSwapClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LeakSwap smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LeakSwapDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? LeakSwapParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (LeakSwapCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new LeakSwapClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LeakSwap smart contract using the createApplication(byte[],account,byte[],uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<LeakSwapArgs['obj']['createApplication(byte[],account,byte[],uint64,uint64)void'] | LeakSwapArgs['tuple']['createApplication(byte[],account,byte[],uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(LeakSwapParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LeakSwap smart contract using the createApplication(byte[],account,byte[],uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<LeakSwapArgs['obj']['createApplication(byte[],account,byte[],uint64,uint64)void'] | LeakSwapArgs['tuple']['createApplication(byte[],account,byte[],uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(LeakSwapParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LeakSwap smart contract using an ABI method call using the createApplication(byte[],account,byte[],uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<LeakSwapArgs['obj']['createApplication(byte[],account,byte[],uint64,uint64)void'] | LeakSwapArgs['tuple']['createApplication(byte[],account,byte[],uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(LeakSwapParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | LeakSwapReturns['createApplication(byte[],account,byte[],uint64,uint64)void']) }, appClient: new LeakSwapClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LeakSwap smart contract
 */
export class LeakSwapClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LeakSwapClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LeakSwap app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LeakSwapClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LeakSwapNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LeakSwapClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LeakSwapClient> {
    return new LeakSwapClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LeakSwapClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LeakSwapClient> {
    return new LeakSwapClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the LeakSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `verifySignature(byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifySignature: (params: CallParams<LeakSwapArgs['obj']['verifySignature(byte[],byte[])void'] | LeakSwapArgs['tuple']['verifySignature(byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LeakSwapParamsFactory.verifySignature(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `setReady()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setReady: (params: CallParams<LeakSwapArgs['obj']['setReady()void'] | LeakSwapArgs['tuple']['setReady()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LeakSwapParamsFactory.setReady(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `getContractState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractState: (params: CallParams<LeakSwapArgs['obj']['getContractState()uint64'] | LeakSwapArgs['tuple']['getContractState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LeakSwapParamsFactory.getContractState(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `leakyRefund(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    leakyRefund: (params: CallParams<LeakSwapArgs['obj']['leakyRefund(byte[])void'] | LeakSwapArgs['tuple']['leakyRefund(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LeakSwapParamsFactory.leakyRefund(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `leakyClaim(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    leakyClaim: (params: CallParams<LeakSwapArgs['obj']['leakyClaim(byte[])void'] | LeakSwapArgs['tuple']['leakyClaim(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LeakSwapParamsFactory.leakyClaim(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `punishRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    punishRefund: (params: CallParams<LeakSwapArgs['obj']['punishRefund()void'] | LeakSwapArgs['tuple']['punishRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LeakSwapParamsFactory.punishRefund(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the LeakSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `verifySignature(byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifySignature: (params: CallParams<LeakSwapArgs['obj']['verifySignature(byte[],byte[])void'] | LeakSwapArgs['tuple']['verifySignature(byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LeakSwapParamsFactory.verifySignature(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `setReady()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setReady: (params: CallParams<LeakSwapArgs['obj']['setReady()void'] | LeakSwapArgs['tuple']['setReady()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LeakSwapParamsFactory.setReady(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `getContractState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractState: (params: CallParams<LeakSwapArgs['obj']['getContractState()uint64'] | LeakSwapArgs['tuple']['getContractState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LeakSwapParamsFactory.getContractState(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `leakyRefund(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    leakyRefund: (params: CallParams<LeakSwapArgs['obj']['leakyRefund(byte[])void'] | LeakSwapArgs['tuple']['leakyRefund(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LeakSwapParamsFactory.leakyRefund(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `leakyClaim(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    leakyClaim: (params: CallParams<LeakSwapArgs['obj']['leakyClaim(byte[])void'] | LeakSwapArgs['tuple']['leakyClaim(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LeakSwapParamsFactory.leakyClaim(params))
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `punishRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    punishRefund: (params: CallParams<LeakSwapArgs['obj']['punishRefund()void'] | LeakSwapArgs['tuple']['punishRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LeakSwapParamsFactory.punishRefund(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the LeakSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `verifySignature(byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifySignature: async (params: CallParams<LeakSwapArgs['obj']['verifySignature(byte[],byte[])void'] | LeakSwapArgs['tuple']['verifySignature(byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LeakSwapParamsFactory.verifySignature(params))
      return {...result, return: result.return as unknown as (undefined | LeakSwapReturns['verifySignature(byte[],byte[])void'])}
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `setReady()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setReady: async (params: CallParams<LeakSwapArgs['obj']['setReady()void'] | LeakSwapArgs['tuple']['setReady()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LeakSwapParamsFactory.setReady(params))
      return {...result, return: result.return as unknown as (undefined | LeakSwapReturns['setReady()void'])}
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `getContractState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractState: async (params: CallParams<LeakSwapArgs['obj']['getContractState()uint64'] | LeakSwapArgs['tuple']['getContractState()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LeakSwapParamsFactory.getContractState(params))
      return {...result, return: result.return as unknown as (undefined | LeakSwapReturns['getContractState()uint64'])}
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `leakyRefund(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    leakyRefund: async (params: CallParams<LeakSwapArgs['obj']['leakyRefund(byte[])void'] | LeakSwapArgs['tuple']['leakyRefund(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LeakSwapParamsFactory.leakyRefund(params))
      return {...result, return: result.return as unknown as (undefined | LeakSwapReturns['leakyRefund(byte[])void'])}
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `leakyClaim(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    leakyClaim: async (params: CallParams<LeakSwapArgs['obj']['leakyClaim(byte[])void'] | LeakSwapArgs['tuple']['leakyClaim(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LeakSwapParamsFactory.leakyClaim(params))
      return {...result, return: result.return as unknown as (undefined | LeakSwapReturns['leakyClaim(byte[])void'])}
    },

    /**
     * Makes a call to the LeakSwap smart contract using the `punishRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    punishRefund: async (params: CallParams<LeakSwapArgs['obj']['punishRefund()void'] | LeakSwapArgs['tuple']['punishRefund()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LeakSwapParamsFactory.punishRefund(params))
      return {...result, return: result.return as unknown as (undefined | LeakSwapReturns['punishRefund()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LeakSwapClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LeakSwap app
   */
  state = {
    /**
     * Methods to access global state for the current LeakSwap app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          aliAlgoAddr: result.aliAlgoAddr,
          xinAlgoAddr: result.xinAlgoAddr,
          aliXternalPk: new BinaryStateValue(result.aliXternalPK),
          xinXternalPk: new BinaryStateValue(result.xinXternalPK),
          t0: result.t0,
          t1: result.t1,
          aliReady: result.aliReady,
        }
      },
      /**
       * Get the current value of the aliAlgoAddr key in global state
       */
      aliAlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("aliAlgoAddr")) as string | undefined },
      /**
       * Get the current value of the xinAlgoAddr key in global state
       */
      xinAlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("xinAlgoAddr")) as string | undefined },
      /**
       * Get the current value of the aliXternalPK key in global state
       */
      aliXternalPk: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("aliXternalPK")) as Uint8Array | undefined) },
      /**
       * Get the current value of the xinXternalPK key in global state
       */
      xinXternalPk: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("xinXternalPK")) as Uint8Array | undefined) },
      /**
       * Get the current value of the t0 key in global state
       */
      t0: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("t0")) as bigint | undefined },
      /**
       * Get the current value of the t1 key in global state
       */
      t1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("t1")) as bigint | undefined },
      /**
       * Get the current value of the aliReady key in global state
       */
      aliReady: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("aliReady")) as bigint | undefined },
    },
  }

  public newGroup(): LeakSwapComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a verifySignature(byte[],byte[])void method call against the LeakSwap contract
       */
      verifySignature(params: CallParams<LeakSwapArgs['obj']['verifySignature(byte[],byte[])void'] | LeakSwapArgs['tuple']['verifySignature(byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifySignature(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setReady()void method call against the LeakSwap contract
       */
      setReady(params: CallParams<LeakSwapArgs['obj']['setReady()void'] | LeakSwapArgs['tuple']['setReady()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setReady(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getContractState()uint64 method call against the LeakSwap contract
       */
      getContractState(params: CallParams<LeakSwapArgs['obj']['getContractState()uint64'] | LeakSwapArgs['tuple']['getContractState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractState(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractState()uint64', v))
        return this
      },
      /**
       * Add a leakyRefund(byte[])void method call against the LeakSwap contract
       */
      leakyRefund(params: CallParams<LeakSwapArgs['obj']['leakyRefund(byte[])void'] | LeakSwapArgs['tuple']['leakyRefund(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.leakyRefund(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a leakyClaim(byte[])void method call against the LeakSwap contract
       */
      leakyClaim(params: CallParams<LeakSwapArgs['obj']['leakyClaim(byte[])void'] | LeakSwapArgs['tuple']['leakyClaim(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.leakyClaim(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a punishRefund()void method call against the LeakSwap contract
       */
      punishRefund(params: CallParams<LeakSwapArgs['obj']['punishRefund()void'] | LeakSwapArgs['tuple']['punishRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.punishRefund(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the LeakSwap contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LeakSwapComposer
  }
}
export type LeakSwapComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the verifySignature(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifySignature(params?: CallParams<LeakSwapArgs['obj']['verifySignature(byte[],byte[])void'] | LeakSwapArgs['tuple']['verifySignature(byte[],byte[])void']>): LeakSwapComposer<[...TReturns, LeakSwapReturns['verifySignature(byte[],byte[])void'] | undefined]>

  /**
   * Calls the setReady()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setReady(params?: CallParams<LeakSwapArgs['obj']['setReady()void'] | LeakSwapArgs['tuple']['setReady()void']>): LeakSwapComposer<[...TReturns, LeakSwapReturns['setReady()void'] | undefined]>

  /**
   * Calls the getContractState()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractState(params?: CallParams<LeakSwapArgs['obj']['getContractState()uint64'] | LeakSwapArgs['tuple']['getContractState()uint64']>): LeakSwapComposer<[...TReturns, LeakSwapReturns['getContractState()uint64'] | undefined]>

  /**
   * Calls the leakyRefund(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  leakyRefund(params?: CallParams<LeakSwapArgs['obj']['leakyRefund(byte[])void'] | LeakSwapArgs['tuple']['leakyRefund(byte[])void']>): LeakSwapComposer<[...TReturns, LeakSwapReturns['leakyRefund(byte[])void'] | undefined]>

  /**
   * Calls the leakyClaim(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  leakyClaim(params?: CallParams<LeakSwapArgs['obj']['leakyClaim(byte[])void'] | LeakSwapArgs['tuple']['leakyClaim(byte[])void']>): LeakSwapComposer<[...TReturns, LeakSwapReturns['leakyClaim(byte[])void'] | undefined]>

  /**
   * Calls the punishRefund()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  punishRefund(params?: CallParams<LeakSwapArgs['obj']['punishRefund()void'] | LeakSwapArgs['tuple']['punishRefund()void']>): LeakSwapComposer<[...TReturns, LeakSwapReturns['punishRefund()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the LeakSwap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LeakSwapComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LeakSwapComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LeakSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LeakSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LeakSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LeakSwapComposerResults<TReturns>>
}
export type LeakSwapComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

