{
    "hints": {
        "createApplication(byte[],account,byte[],uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "verifySignature(byte[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setReady()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getContractState()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "leakyRefund(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "leakyClaim(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "punishRefund()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "aliAlgoAddr": {
                    "type": "bytes",
                    "key": "aliAlgoAddr"
                },
                "aliReady": {
                    "type": "uint64",
                    "key": "aliReady"
                },
                "aliXternalPK": {
                    "type": "bytes",
                    "key": "aliXternalPK"
                },
                "t0": {
                    "type": "uint64",
                    "key": "t0"
                },
                "t1": {
                    "type": "uint64",
                    "key": "t1"
                },
                "xinAlgoAddr": {
                    "type": "bytes",
                    "key": "xinAlgoAddr"
                },
                "xinXternalPK": {
                    "type": "bytes",
                    "key": "xinXternalPK"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "LeakSwap",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "aliXternalPK"
                    },
                    {
                        "type": "account",
                        "name": "xinAlgoAddr"
                    },
                    {
                        "type": "byte[]",
                        "name": "xinXternalPK"
                    },
                    {
                        "type": "uint64",
                        "name": "t0"
                    },
                    {
                        "type": "uint64",
                        "name": "t1"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verifySignature",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    },
                    {
                        "type": "byte[]",
                        "name": "xternalPK"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setReady",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getContractState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "leakyRefund",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "leakyClaim",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "punishRefund",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}