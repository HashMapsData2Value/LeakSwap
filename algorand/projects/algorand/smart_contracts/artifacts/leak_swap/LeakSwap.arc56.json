{
    "name": "LeakSwap",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "byte[]",
                    "name": "aliXternalPK"
                },
                {
                    "type": "account",
                    "name": "xinAlgoAddr"
                },
                {
                    "type": "byte[]",
                    "name": "xinXternalPK"
                },
                {
                    "type": "uint64",
                    "name": "t0"
                },
                {
                    "type": "uint64",
                    "name": "t1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verifySignature",
            "args": [
                {
                    "type": "byte[]",
                    "name": "signature"
                },
                {
                    "type": "byte[]",
                    "name": "xternalPK"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setReady",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractState",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "leakyRefund",
            "args": [
                {
                    "type": "byte[]",
                    "name": "signature"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "leakyClaim",
            "args": [
                {
                    "type": "byte[]",
                    "name": "signature"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "punishRefund",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "aliAlgoAddr": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWxpQWxnb0FkZHI="
                },
                "xinAlgoAddr": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "eGluQWxnb0FkZHI="
                },
                "aliXternalPK": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWxpWHRlcm5hbFBL"
                },
                "xinXternalPK": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "eGluWHRlcm5hbFBL"
                },
                "t0": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dDA="
                },
                "t1": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dDE="
                },
                "aliReady": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWxpUmVhZHk="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        592
                    ],
                    "errorMessage": "Cannot claim after t1!"
                },
                {
                    "pc": [
                        584
                    ],
                    "errorMessage": "Cannot claim: time must be past t0 OR Ali must have set ready!"
                },
                {
                    "pc": [
                        632
                    ],
                    "errorMessage": "Cannot punish refund before t1!"
                },
                {
                    "pc": [
                        501
                    ],
                    "errorMessage": "Cannot refund after set ready!"
                },
                {
                    "pc": [
                        495
                    ],
                    "errorMessage": "Cannot refund after t0!"
                },
                {
                    "pc": [
                        150,
                        162,
                        180,
                        198,
                        220,
                        232,
                        256
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        487
                    ],
                    "errorMessage": "Only Ali can do leaky refund!"
                },
                {
                    "pc": [
                        624
                    ],
                    "errorMessage": "Only Ali can do punish refund!"
                },
                {
                    "pc": [
                        435
                    ],
                    "errorMessage": "Only Ali can set the contract to ready!"
                },
                {
                    "pc": [
                        565
                    ],
                    "errorMessage": "Only Xin can do leaky claim!"
                },
                {
                    "pc": [
                        418
                    ],
                    "errorMessage": "R-point encoding not 0x58666... . Signature R must be broken (=BASEPOINT) to allow the secret key to be leaked!"
                },
                {
                    "pc": [
                        426
                    ],
                    "errorMessage": "Signature verification failed!"
                },
                {
                    "pc": [
                        260
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        153,
                        165,
                        183,
                        201,
                        223,
                        235
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        433,
                        445,
                        458,
                        469,
                        485,
                        493,
                        499,
                        506,
                        516,
                        563,
                        571,
                        579,
                        590,
                        597,
                        608,
                        622,
                        630,
                        636
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        333
                    ],
                    "errorMessage": "t0 must be in the future"
                },
                {
                    "pc": [
                        327
                    ],
                    "errorMessage": "t1 must be greater than t0"
                },
                {
                    "pc": [
                        339
                    ],
                    "errorMessage": "t1 must be in the future"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmCAthbGlBbGdvQWRkcghhbGlSZWFkeQJ0MAJ0MQt4aW5BbGdvQWRkcgxhbGlYdGVybmFsUEsMeGluWHRlcm5hbFBLAwaBATEYQAADKSJnMRtBADiCBwSt6wbdBCG1GwgEGAQl9gQT8iYoBJ7oTAEE3aiL4wQITnxYNhoAjgcAbABUAEgAMgAgAA4AAiJDMRkURDEYRIgBzCNDMRkURDEYRDYaAVcCAIgBWiNDMRkURDEYRDYaAVcCAIgBHCNDMRkURDEYRIgA6xaABBUffHVMULAjQzEZFEQxGESIAMkjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAHEjQzEZFEQxGBRENhoBVwIANhoCF8AcNhoDVwIANhoEFzYaBReIAAIjQ4oFACgyCWcnBYv7ZycEi/xnJwaL/Wcqi/5nK4v/Z4v/i/4NRIv+MgcNRIv/MgcNRImKAQCxi/+yB4v/sgkisggjshAisgGziYoCAIv+i/+IAAGJigIAi/5XACCAIFhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmEkQyCov+i/+ERIkxACIoZUQSRCkjZ4kyByIrZUQNQQADgQOJMgciKmVEDUEAA4ECiSIpZURBAAIjiSKJigEAMQAiKGVEEkQyByIqZUQORCIpZUQURCInBWVEi/9MiP92IihlRIj/TYmKAQCB2g8yDA1BABixgQayEIEFshknB7IeJweyHyKyAbNC/98xACInBGVEEkQyByIqZUQNQAAHIillREEAHiNEMgciK2VEDEQiJwZlRIv/TIj/GyInBGVEiP7xiSJC/98xACIoZUQSRDIHIitlRA9EIihlRIj+1Yk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}